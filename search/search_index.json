{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Notes with MkDocs","text":""},{"location":"#mkdocs-help","title":"MkDocs help","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml              # The configuration file.\ndocs/\n    index.md            # This page.\n    personal-notes/     # Notes.\n</code></pre>"},{"location":"personal-notes/Inbox/","title":"Inbox","text":""},{"location":"personal-notes/Assets/Excalidraw/Drawing%202024-07-27%2021.08.57.excalidraw/","title":"Drawing 2024 07 27 21.08.57.excalidraw","text":"<p>==\u26a0  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. \u26a0== You can decompress Drawing data with the command palette: 'Decompress current Excalidraw file'. For more info check in plugin settings under 'Saving'</p>","tags":["excalidraw"]},{"location":"personal-notes/Assets/Excalidraw/Drawing%202024-07-27%2021.08.57.excalidraw/#excalidraw-data","title":"Excalidraw Data","text":"","tags":["excalidraw"]},{"location":"personal-notes/Assets/Excalidraw/Drawing%202024-07-27%2021.08.57.excalidraw/#text-elements","title":"Text Elements","text":"<p>%%</p>","tags":["excalidraw"]},{"location":"personal-notes/Assets/Excalidraw/Drawing%202024-07-27%2021.08.57.excalidraw/#drawing","title":"Drawing","text":"<p><pre><code>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\n</code></pre> %%</p>","tags":["excalidraw"]},{"location":"personal-notes/Journal/2024-07-28/","title":"2024 07 28","text":""},{"location":"personal-notes/Journal/2024-07-28/#recursion-basic","title":"Recursion Basic","text":"<ul> <li>Print a name N times recursively</li> </ul> <pre><code># Print a name N times recursively\n\ndef print_name_rec(name, curr, N):\n    if curr &gt; N:\n        return\n    print(name, end=\" \")\n    print_name_rec(name, curr + 1, N)\n\nif __name__ == \"__main__\":\n    print_name_rec(\"John\", 1, 5)\n</code></pre> <ul> <li>Print a sequence of numbers in ascending order recursively</li> </ul> <pre><code># Print a sequence of numbers in ascending order recursively\n\ndef print_asc_rec(curr, end):\n    if curr &gt; end:\n        return\n    print(curr, end=\" \")\n    print_asc_rec(curr + 1, end)\n\nif __name__ == \"__main__\":\n    print_asc_rec(1, 10)\n</code></pre> <ul> <li>Print a sequence of numbers in descending order recursively</li> </ul> <pre><code># Print a sequence of numbers in descending order recursively \n\ndef print_desc_rec(curr, end):\n    if curr &lt; end:\n        return\n    print(curr, end=\" \")\n    print_desc_rec(curr - 1, end)\n\nif __name__ == \"__main__\":\n    print_desc_rec(10, 1)\n</code></pre> <ul> <li>Print the sum of first N natural numbers recursively</li> </ul> <pre><code># Print the sum of a sequence of natural numbers\n\ndef sum_first_n_rec(n, curr = 1):\n    if curr &gt; n:\n        return 0\n    return curr + sum_first_n_rec(n, curr + 1)\n\nif __name__ == \"__main__\":\n    sum_total = sum_first_n_rec(10)\n    print(sum_total)\n</code></pre> <ul> <li>Factorial of N numbers recursively</li> </ul> <pre><code># Factorial of N numbers recursively\n\ndef facto_n_rec(n, curr = 1):\n    if curr &gt; n:\n        return 1\n    return curr * facto_n_rec(n, curr + 1)\n\nif __name__ == \"__main__\":\n    facto = facto_n_rec(10)\n    print(facto)\n</code></pre> <ul> <li>Reverse and array recursively</li> </ul> <pre><code># Factorial of N numbers recursively\n\ndef rev_arr_rec(arr, curr):\n    n = len(arr)\n    if curr == int(n / 2):\n        return\n    arr[curr], arr[n - curr - 1] = arr[n - curr - 1], arr[curr]\n    rev_arr_rec(arr, curr + 1)\n\n\nif __name__ == \"__main__\":\n    arr = [int(ch.strip()) for ch in input().split(\",\")]\n    rev_arr_rec(arr, 0)\n    print(arr)\n</code></pre> <ul> <li>Check for Palindrome recursively</li> </ul> <pre><code># Check for Palindrome recursively\n\ndef check_palindrome_rec(string, curr):\n    n = len(string)\n    if curr &gt; int(n / 2):\n        return True\n    if string[curr] != string[n - curr - 1]:\n        return False\n\n    return check_palindrome_rec(string, curr + 1)\n\n\nif __name__ == \"__main__\":\n    string = input()\n    print(check_palindrome_rec(string, 0))\n</code></pre> <ul> <li>Print N fibonacci numbers:</li> </ul> <pre><code># Iterative method\ndef print_n_fibo(n):\n    a = 0\n    b = 1\n    for i in range(1, n + 1):\n        if i == 1:\n            print(0, end=\" \")\n        elif i == 2:\n            print(1, end=\" \")\n        else:\n            b = a + b\n            a = b - a\n            print(b, end=\" \")\n\n# Recursive method\ndef print_n_fibo_rec(n, a = 0, b = 1, curr = 1):\n    if curr &gt; n:\n        return\n    if curr == 1:\n        print(0, end=\" \")\n    elif curr == 2:\n        print(1, end=\" \")\n    else:\n        b = a + b\n        a = b - a\n        print(b, end=\" \")\n    print_n_fibo_rec(n, a, b, curr + 1)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print_n_fibo_rec(n)\n    print(\"\\n\")\n    print_n_fibo(n)\n</code></pre>"},{"location":"personal-notes/Notes/000_Index_DS_Algo/","title":"Data Structures and Algorithms Index","text":"","tags":["ds-algo/0-index"]},{"location":"personal-notes/Notes/000_Index_DS_Algo/#basics-of-language-and-dsa","title":"Basics of Language and DSA","text":"","tags":["ds-algo/0-index"]},{"location":"personal-notes/Notes/000_Index_DS_Algo/#basics-of-languages","title":"Basics of Languages","text":"","tags":["ds-algo/0-index"]},{"location":"personal-notes/Notes/000_Index_DS_Algo/#input-and-output","title":"Input and Output","text":"<ul> <li>Input_and_Output_in_CPP</li> <li>Input_and_Output_in_Python</li> </ul>","tags":["ds-algo/0-index"]},{"location":"personal-notes/Notes/000_Index_DS_Algo/#data-types","title":"Data Types","text":"<ul> <li>Data_Types_in_CPP</li> <li>Data_Types_in_Python</li> </ul>","tags":["ds-algo/0-index"]},{"location":"personal-notes/Notes/000_Index_DS_Algo/#flow-of-control","title":"Flow of Control","text":"<ul> <li>Flow_of_Control_in_Python</li> <li>Functions_in_Python</li> </ul>","tags":["ds-algo/0-index"]},{"location":"personal-notes/Notes/000_Index_DS_Algo/#templates-and-collections","title":"Templates and Collections","text":"<ul> <li>Collections_in_Python</li> </ul>","tags":["ds-algo/0-index"]},{"location":"personal-notes/Notes/000_Index_DS_Algo/#modules","title":"Modules","text":"<ul> <li>Modules_Imports_in_Python</li> </ul>","tags":["ds-algo/0-index"]},{"location":"personal-notes/Notes/000_Index_DS_Algo/#oops","title":"OOPS","text":"","tags":["ds-algo/0-index"]},{"location":"personal-notes/Notes/000_Index_DS_Algo/#unit-testing","title":"Unit Testing","text":"","tags":["ds-algo/0-index"]},{"location":"personal-notes/Notes/000_Index_DS_Algo/#basics-of-recursion","title":"Basics of Recursion","text":"<ul> <li>Problems_on_Basic_Recursion</li> </ul>","tags":["ds-algo/0-index"]},{"location":"personal-notes/Notes/Collections_in_Python/","title":"Collections in Python","text":"<p>000_Index_DS_Algo</p> <ul> <li>Strings_in_Python</li> <li>Lists_in_Python</li> <li>Tuples_in_Python</li> <li>Dictionaries_in_Python</li> <li> <p>Sets_in_Python</p> </li> <li> <p>Operation_on_Python_Collections</p> </li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Collections_in_Python/#related-pages","title":"Related Pages","text":"<ul> <li>Input_and_Output_in_Python</li> <li>Data_Types_in_Python</li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Collections_in_Python/#references","title":"References","text":"","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Data_Types_in_CPP/","title":"Data Types in C++","text":"<p>000_Index_DS_Algo</p>","tags":["ds-algo/lang-basic/cpp"]},{"location":"personal-notes/Notes/Data_Types_in_CPP/#strings-and-getline","title":"Strings and <code>getline</code>","text":"<ul> <li>To use strings use <code>#include&lt;string&gt;</code>.</li> <li>To read a single line from input at a time use</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main() {\n    string str;\n    getline(cin, str);\n\n    // .. Other code here\n}\n</code></pre>","tags":["ds-algo/lang-basic/cpp"]},{"location":"personal-notes/Notes/Data_Types_in_CPP/#related-pages","title":"Related Pages","text":"<ul> <li>Data_Types_in_Python</li> </ul>","tags":["ds-algo/lang-basic/cpp"]},{"location":"personal-notes/Notes/Data_Types_in_CPP/#references","title":"References","text":"","tags":["ds-algo/lang-basic/cpp"]},{"location":"personal-notes/Notes/Data_Types_in_Python/","title":"Data Types in Python","text":"<p>000_Index_DS_Algo</p>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Data_Types_in_Python/#atomic-data-types","title":"Atomic Data Types","text":"<ul> <li><code>int</code></li> <li><code>float</code></li> <li><code>bool</code></li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Data_Types_in_Python/#to-get-the-type-of-an-object","title":"To get the type of an object","text":"<pre><code>x = 5\nprint(type(x))  # &lt;class 'int'&gt;\n</code></pre>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Data_Types_in_Python/#to-type-cast-use","title":"To type-cast use","text":"<pre><code>number = 73\nx = str(number)\nprint(type(x))  # &lt;class 'str'&gt;\n\nprint(float(\"inf\") + 1) # inf\n</code></pre> <ul> <li>type and class are often used for same meaning.</li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Data_Types_in_Python/#variables-and-objects","title":"Variables and Objects","text":"<ul> <li>Note the expression -</li> </ul> <pre><code>x = [1, 2, 3]\n</code></pre> <ul> <li>Here\u00a0<code>x</code>\u00a0is a variable.\u00a0<code>[1, 2, 3]</code>\u00a0is an\u00a0object\u00a0in memory. An object once created can't be reused.</li> <li>We can re-assign\u00a0<code>x</code>\u00a0to a new object.</li> </ul> <pre><code>x = \"Hello\"      # [1, 2, 3] is not used. A new object is created\n</code></pre> <ul> <li> <p>Object can have</p> <ul> <li>Identity</li> <li>Type</li> <li>Value</li> </ul> </li> <li> <p>For atomic types all the above can't be changed. For other types value may or may not be changed. </p> <ul> <li>For ex.\u00a0a string is immutable\u00a0- it's value can't be changed, but a list isn't - we can add or delete elements thus changing it's value.</li> </ul> </li> <li> <p>To check if the variables are referring to same object use\u00a0<code>is</code>\u00a0keyword.</p> </li> </ul> <pre><code>x = [1, 2, 3]\ny = x;\nz = [1, 2, 3]\n\nprint(x is y)   # True\nprint(x is z)   # False\nprint(x == z)   # True\n</code></pre> <ul> <li>To represent infinity use. (Don't use\u00a0<code>int</code>)</li> </ul> <pre><code>thisworks = float(\"inf\")\n</code></pre>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Data_Types_in_Python/#related-pages","title":"Related Pages","text":"<ul> <li>Input_and_Output_in_Python</li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Data_Types_in_Python/#references","title":"References","text":"","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Dictionaries_in_Python/","title":"Dictionaries in Python","text":"<p>000_Index_DS_Algo Collections_in_Python</p> <ul> <li> <p>The name of the class for dictionaries is <code>dict</code>.</p> </li> <li> <p>Collection of key value pairs. The order of the key-value-pairs is not defined.</p> </li> </ul> <pre><code>d = dict()          # Empty Dictionary\nd[5] = \"five\"       # key 5 not present - creating one\nd[2] = \"two\"\nd[\"pi\"] = 3.1415926\n\nprint(type(d))      # &lt;class 'dict'&gt;\nprint(d)            # {5: 'five', 2: 'two', 'pi': 3.1415926}\nprint(d[\"pi\"])      # 3.1415926\n</code></pre> <ul> <li> <p>Keys can be either an atomic type (<code>int</code>, <code>float</code>, <code>boolean</code>), or <code>string</code>, or <code>tuple</code> - i.e. it has to be immutable.</p> </li> <li> <p>If we assign to a key that's not already present in the dictionary -   it creates a new key (as shown in the above example).</p> </li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Dictionaries_in_Python/#related-pages","title":"Related Pages","text":"","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Dictionaries_in_Python/#references","title":"References","text":"<ol> <li>Dictionaries-Python_docs</li> </ol>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Flow_of_Control_in_Python/","title":"Flow of Control in Python","text":"<p>000_Index_DS_Algo</p>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Flow_of_Control_in_Python/#if-statements","title":"If statements","text":"<ul> <li>We have <code>if</code>, <code>elif</code>, <code>else</code></li> </ul> <pre><code>if 2 + 2 &lt; 3:\n    print(\"Test - 01\")\nelif 3+2 &gt; 6:\n    print(\"Test - 02\")\nelse:\n    print(\"Test - 03\")\n</code></pre> <ul> <li> <p>Note the colon <code>:</code> at the end.</p> </li> <li> <p>Equality operators like  <code>!= , &gt;, &lt;, &gt;=, ==, &lt;=</code> work the same.</p> </li> <li> <p>The value of true is <code>True</code> (capital T) and false is <code>False</code> (capital F).</p> </li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Flow_of_Control_in_Python/#switch-case-only-applicable-in-python-310","title":"switch - case (Only applicable in Python 3.10)","text":"<ul> <li> <p>In place of switch we have the <code>match</code> keyword</p> </li> <li> <p><code>_</code> - default case</p> </li> </ul> <pre><code>match term:\n    case pattern-1:\n        action-1\n    case pattern-2:\n        action-2\n    case pattern-3:\n        action-3\n    case _:\n        action-default\n</code></pre>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Flow_of_Control_in_Python/#while-loop","title":"<code>while</code> loop","text":"<ul> <li><code>while</code> works same. Note the <code>:</code> at end.</li> </ul> <pre><code>x = 1                   # initialize\nwhile x &lt; 128:          # condition\n    print(x, end=\" \")\n    x = x * 2           # update\n</code></pre>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Flow_of_Control_in_Python/#break-and-continue","title":"<code>break</code> and <code>continue</code>","text":"<ul> <li><code>break</code> and <code>continue</code> works as usual.</li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Flow_of_Control_in_Python/#for-loop","title":"<code>for</code> loop","text":"<ul> <li>Note Operation_on_Python_Collections#Iteration</li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Flow_of_Control_in_Python/#exception-handling","title":"Exception handling","text":"<ul> <li> <p>We use <code>except</code> to catch an exception.</p> </li> <li> <p>Use <code>raise</code> to manually throw exceptions</p> </li> </ul> <pre><code>x = \"not a number\"\ntry:\n    f = float(x)        # or `raise ValueError(\"An Error\")`\nexcept ValueError:      # catch if it's ValueError\n    print(\"You can't do that!\")\n</code></pre> <ul> <li><code>Exception</code> is the wildcard that catches everything.</li> </ul> <pre><code>try:\n    raise Exception('spam', 'eggs')\nexcept Exception as err:\n    print(type(err))    # &lt;class 'Exception'&gt;\n    print(err.args)     # ('spam', 'eggs')\n    print(err)          # ('spam', 'eggs') \n</code></pre>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Flow_of_Control_in_Python/#related-pages","title":"Related Pages","text":"<ul> <li>Functions_in_Python</li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Flow_of_Control_in_Python/#references","title":"References","text":"<ol> <li>Python switch case example</li> </ol>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Functions_in_Python/","title":"Functions in Python","text":"<p>000_Index_DS_Algo</p> <ul> <li>Function is defined as follows:</li> </ul> <pre><code>def fib(n):\n    \"\"\"Print a Fibonacci series up to n.\"\"\" # documentation string\n    a, b = 0, 1\n    while a &lt; n:\n        print(a, end=' ')\n        a, b = b, a + b     # technique for swapping a and b\n    print()\n\n    # returns None\n</code></pre> <ul> <li> <p>Functions must be defined by <code>def</code> keyword.</p> </li> <li> <p>Note that <code>\"\"\"</code> for documentation of functions.</p> </li> <li> <p>Functions are objects.</p> <ul> <li>If we define a function twice, even if we change the parameters, the first will be overwritten by the second.</li> </ul> </li> </ul> <pre><code>def foo(x):\n    return x + 2\n\ndef bar(someFunction):\n    return someFunction(4)\n\nprint(bar(foo))                 # 6\nsomeVariable = foo \nprint(bar(someVariable))        # 6\n</code></pre> <ul> <li>The\u00a0<code>return</code> \u00a0statement returns with a value from a function.\u00a0<code>return</code>\u00a0without an expression argument returns\u00a0<code>None</code>. Falling off the end of a function also returns\u00a0<code>None</code>.</li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Functions_in_Python/#default-arguments","title":"Default Arguments","text":"<ul> <li>Default arguments work as usual -</li> </ul> <pre><code>def f(arg=\"Test\"):\n    print(arg)\n\nf()            # Test\n</code></pre> <ul> <li>The default value could be a variable or constant. They are evaluated at the point of function definition in the\u00a0defining\u00a0scope.</li> </ul> <pre><code>i = 5\n\ndef f(arg=i):\n    print(arg)\n\ni = 6\nf()              # prints 5\n</code></pre>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Functions_in_Python/#related-pages","title":"Related Pages","text":"","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Functions_in_Python/#references","title":"References","text":"<ol> <li>Python Docs</li> </ol>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Input_and_Output_in_CPP/","title":"Input and Output in C++","text":"<p>000_Index_DS_Algo</p> <ul> <li>Create two files <code>input.txt</code> and <code>output.txt</code>, for input and output.</li> <li>Within <code>main</code> use the following:</li> </ul> <pre><code>int main() {\n    freopen(\"input.txt\", \"r\", stdin);\n    freopen(\"output.txt\", \"w\", stdout);\n\n    // ... Other code here\n}\n</code></pre>","tags":["ds-algo/lang-basic/cpp"]},{"location":"personal-notes/Notes/Input_and_Output_in_CPP/#related-pages","title":"Related Pages","text":"<ul> <li>Input_and_Output_in_Python</li> </ul>","tags":["ds-algo/lang-basic/cpp"]},{"location":"personal-notes/Notes/Input_and_Output_in_CPP/#references","title":"References","text":"","tags":["ds-algo/lang-basic/cpp"]},{"location":"personal-notes/Notes/Input_and_Output_in_Python/","title":"Input and Output in Python","text":"<p>000_Index_DS_Algo</p> <ul> <li>Create two files <code>input.txt</code> and <code>output.txt</code>, for input and output.<ul> <li>For error use <code>error.txt</code></li> </ul> </li> <li>Within script use the following at the top:</li> </ul> <pre><code>import sys\n\nsys.stdin = open(r\"./input.txt\", \"r\")\nsys.stdout = open(r\"./output.txt\", \"w\")\nsys.stderr = open(r\"./error.txt\", \"w\")\n</code></pre> <ul> <li>For input and output use the following:</li> </ul> <pre><code>p = input()           # Read entire line\nprint(p)              # print to stdout\nsys.stderr.write(p)   # print to stderr\n</code></pre> <ul> <li>To input a sequence of numbers from stdin to an array use</li> </ul> <pre><code># assuming numbers are separated by ,\narr = [int(ch.strip()) for ch in input().split(\",\")]\n</code></pre>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Input_and_Output_in_Python/#related-pages","title":"Related Pages","text":"<ul> <li>Input_and_Output_in_CPP</li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Input_and_Output_in_Python/#references","title":"References","text":"","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Lists_in_Python/","title":"Lists in Python","text":"<p>000_Index_DS_Algo Collections_in_Python</p> <ul> <li>Ordered sequence of objects - which can have any types. There are no arrays with pre-defined data-type in python.</li> </ul> <pre><code>L = [1, 2, \"test\"]\n\nprint(type(L))   # &lt;class 'list'&gt;\n</code></pre> <ul> <li>The content of a list like strings can be accessed using a zero based index. A negative index signifies counting from reverse.</li> </ul> <p>NOTE The last element is  <code>L(-1)</code> and NOT <code>L(-0)</code>.</p> <ul> <li> <p><code>L.append(100)</code> - Appends at the back of list.</p> </li> <li> <p>Lists are not immutable. We can update existing values.</p> </li> <li> <p>An empty list is created as (<code>len</code> measures length of any sequence)</p> </li> </ul> <pre><code>L = []\nprint(len(L))   # 0\n</code></pre> <ul> <li>A list of length <code>n</code> initialised with say 0 (it could be any thing) can   be declared as:</li> </ul> <pre><code>L = [0] * n\n</code></pre>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Lists_in_Python/#related-pages","title":"Related Pages","text":"<ul> <li>Strings_in_Python</li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Lists_in_Python/#references","title":"References","text":"<ol> <li>Lists-Python Docs</li> <li>More_Lists-Python Docs</li> </ol>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Modules_Imports_in_Python/","title":"Modules &amp; Import in Python","text":"<p>000_Index_DS_Algo</p> <ul> <li> <p>A single <code>.py</code> file is a Module. To import one module into another use <code>import</code> keyword. The name of a module, by default, is the name of the file (without the <code>.py</code> extension)</p> </li> <li> <p>When we import a module - the code within the module is executed. </p> </li> <li> <p>Assume two files <code>main.py</code>  and <code>lib.py</code> .  We are running <code>main.py</code>.</p> </li> </ul> <pre><code># In file lib.py\ndef f(x):\n    return 2 * x + 3\n\ndef g(x):\n    return x ** 2 - 1\n\n# In file main.py\nimport lib\n\ndef f(x):\n    return x - 1\n\nprint(lib.f(1))          # 5\nprint(f(1))              # 0\nprint(lib.g(4))          # 15\n</code></pre> <ul> <li> <p>We see that we have <code>f</code> defined in <code>main</code> as well as <code>lib</code>. To use <code>lib</code> we need to use <code>lib.f()</code>.</p> </li> <li> <p>The module that is being run is called the script. <code>main</code> is the script in the above example.</p> </li> <li> <p>Every module has attributes. <code>__name__</code> is one of them.</p> <ul> <li>For script file <code>__name__ = \"__main__\"</code></li> <li> <p>For other modules <code>__name__ = \"lib\"</code> - No <code>__</code> here.</p> </li> <li> <p>This can be helpful if we want to run something only from the file that is being run.</p> </li> </ul> </li> <li> <p>Modules are only executed the first time they are imported. If  we import the same module twice, the namespace exists and can be accessed for the second one.</p> </li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Modules_Imports_in_Python/#import-variations","title":"Import variations","text":"","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Modules_Imports_in_Python/#from-modulename-import-thethingiwanted","title":"<code>from modulename import thethingIwanted</code>","text":"<ul> <li>This brings the new name <code>thethingIwanted</code> into the current namespace. <ul> <li>It doesn\u2019t need to be preceded by <code>modulename</code> and a dot.</li> </ul> </li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Modules_Imports_in_Python/#from-modulename-import","title":"<code>from modulename import *</code>","text":"<ul> <li>Every name defined in the module will be accessible in the current namespace. <ul> <li>It doesn\u2019t need to be preceded by <code>modulename</code> and a dot.</li> </ul> </li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Modules_Imports_in_Python/#import-numpy-as-np","title":"<code>import numpy as np</code>","text":"<ul> <li>We can write <code>np.array</code> instead of <code>numpy.array</code>. This can help avoid naming conflicts.</li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Modules_Imports_in_Python/#related-pages","title":"Related Pages","text":"","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Modules_Imports_in_Python/#references","title":"References","text":"","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Operation_on_Python_Collections/","title":"Operations on Collections in Python","text":"<p>000_Index_DS_Algo Collections_in_Python</p>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Operation_on_Python_Collections/#length","title":"Length","text":"<ul> <li>To get the length of any collection use <code>len()</code></li> </ul> <pre><code>print(len(s))       # 2\n</code></pre>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Operation_on_Python_Collections/#slicing-for-list-tuple-and-string","title":"Slicing (For <code>list</code>, <code>tuple</code>, and <code>string</code>)","text":"<ul> <li> <p><code>slice</code> is only defined when the type has a fixed ordering.</p> </li> <li> <p><code>slice</code> will start with the first index and proceed up to but not including the last index.</p> </li> <li> <p>Negative index count backwards from the end.</p> </li> <li> <p>If we don't mention the first index  - starts from index <code>0</code>.</p> </li> <li> <p>Leaving the last index - will continue till last.</p> </li> <li> <p>Slicing creates a new sequence. Thus for a big collection it is not advisable to use <code>slice</code>.</p> </li> </ul> <pre><code>a = \"a string\"\nb = [\"my\", \"second\", \"favorite\", \"list\"]\nc = (1, 2, 3, \"tuple\")\nprint(a[3:7])       # trin\nprint(a[1:-2])      # ' stri'\nprint(b[1:])        # ['second', 'favorite', 'list']\nprint(c[:2])        # (1, 2)\n</code></pre>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Operation_on_Python_Collections/#iteration","title":"Iteration","text":"<ul> <li> <p>Iterating with a <code>for</code> loop</p> </li> <li> <p>Note the syntax</p> </li> </ul> <pre><code>for obj in Objects\n</code></pre> <pre><code>mylist = [1, 3, 5]\nmytuple = (1, 2, \"skip a few\", 99, 100)\nmyset = {\"a\", \"b\", \"z\"}\nmystring = \"abracadabra\"\nmydict = {\"a\": 96, \"b\": 97, \"c\": 98}\n\nfor item in mylist:\n    print(item, end=\" \")            # 1 3 5\n\nfor item in mytuple:\n    print(item, end=\" \")            # 1 2 skip a few 99 100\n\nfor element in myset:\n    print(element, end=\" \")         # z a b\n\nfor character in mystring:\n    print(character, end=\" \")       # a b r a c a d a b r a\n\nfor key in mydict:\n    print(key, end=\" \")             # a b c\n\nfor key, value in mydict.items():\n    print(key, value, end=\" \")      # a 96 b 97 c 98\n\nfor value in mydict.values():\n    print(value, end=\" \")           # 96 97 98\n</code></pre> <ul> <li>Use the function <code>range()</code> to represent a sequence a numbers.</li> </ul> <pre><code>for i in range(5):\n    print(i, end=\" \")               # 0 1 2 3 4\n\nfor i in range(2, 5):\n    print(i, end=\" \")               # 2 3 4\n</code></pre> <p>NOTE <code>range()</code> - starting index starts from index itself, ending index is one last number before   the mentioned number as shown in the example.</p>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Operation_on_Python_Collections/#related-pages","title":"Related Pages","text":"<ul> <li>Flow_of_Control_in_Python</li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Operation_on_Python_Collections/#references","title":"References","text":"","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Problems_on_Basic_Recursion/","title":"Problems on Basic Recursion","text":"<ul> <li>Print a name N times recursively</li> </ul> <pre><code># Print a name N times recursively\n\ndef print_name_rec(name, curr, N):\n    if curr &gt; N:\n        return\n    print(name, end=\" \")\n    print_name_rec(name, curr + 1, N)\n\nif __name__ == \"__main__\":\n    print_name_rec(\"John\", 1, 5)\n</code></pre> <ul> <li>Print a sequence of numbers in ascending order recursively</li> </ul> <pre><code># Print a sequence of numbers in ascending order recursively\n\ndef print_asc_rec(curr, end):\n    if curr &gt; end:\n        return\n    print(curr, end=\" \")\n    print_asc_rec(curr + 1, end)\n\nif __name__ == \"__main__\":\n    print_asc_rec(1, 10)\n</code></pre> <ul> <li>Print the sum of first N natural numbers recursively</li> </ul> <pre><code># Print the sum of a sequence of natural numbers\n\ndef sum_first_n_rec(n, curr = 1):\n    if curr &gt; n:\n        return 0\n    return curr + sum_first_n_rec(n, curr + 1)\n\nif __name__ == \"__main__\":\n    sum_total = sum_first_n_rec(10)\n    print(sum_total)\n</code></pre> <ul> <li>Factorial of N numbers recursively</li> </ul> <pre><code># Factorial of N numbers recursively\n\ndef facto_n_rec(n, curr = 1):\n    if curr &gt; n:\n        return 1\n    return curr * facto_n_rec(n, curr + 1)\n\nif __name__ == \"__main__\":\n    facto = facto_n_rec(10)\n    print(facto)\n</code></pre> <ul> <li>Reverse and array recursively</li> </ul> <pre><code># Factorial of N numbers recursively\n\ndef rev_arr_rec(arr, curr):\n    n = len(arr)\n    if curr == int(n / 2):\n        return\n    arr[curr], arr[n - curr - 1] = arr[n - curr - 1], arr[curr]\n    rev_arr_rec(arr, curr + 1)\n\n\nif __name__ == \"__main__\":\n    arr = [int(ch.strip()) for ch in input().split(\",\")]\n    rev_arr_rec(arr, 0)\n    print(arr)\n</code></pre> <ul> <li>Check for Palindrome recursively</li> </ul> <pre><code># Check for Palindrome recursively\n\ndef check_palindrome_rec(string, curr):\n    n = len(string)\n    if curr &gt; int(n / 2):\n        return True\n    if string[curr] != string[n - curr - 1]:\n        return False\n\n    return check_palindrome_rec(string, curr + 1)\n\n\nif __name__ == \"__main__\":\n    string = input()\n    print(check_palindrome_rec(string, 0))\n</code></pre> <ul> <li>Print N fibonacci numbers:</li> </ul> <pre><code># Iterative method\ndef print_n_fibo(n):\n    a = 0\n    b = 1\n    for i in range(1, n + 1):\n        if i == 1:\n            print(0, end=\" \")\n        elif i == 2:\n            print(1, end=\" \")\n        else:\n            b = a + b\n            a = b - a\n            print(b, end=\" \")\n\n# Recursive method\ndef print_n_fibo_rec(n, a = 0, b = 1, curr = 1):\n    if curr &gt; n:\n        return\n    if curr == 1:\n        print(0, end=\" \")\n    elif curr == 2:\n        print(1, end=\" \")\n    else:\n        b = a + b\n        a = b - a\n        print(b, end=\" \")\n    print_n_fibo_rec(n, a, b, curr + 1)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print_n_fibo_rec(n)\n    print(\"\\n\")\n    print_n_fibo(n)\n</code></pre>","tags":["ds-algo/basics/basic-recursion"]},{"location":"personal-notes/Notes/Problems_on_Basic_Recursion/#related-pages","title":"Related Pages","text":"<ul> <li>2024-07-28</li> </ul>","tags":["ds-algo/basics/basic-recursion"]},{"location":"personal-notes/Notes/Problems_on_Basic_Recursion/#references","title":"References","text":"","tags":["ds-algo/basics/basic-recursion"]},{"location":"personal-notes/Notes/Sets_in_Python/","title":"Sets in Python","text":"<p>000_Index_DS_Algo Collections_in_Python</p> <ul> <li> <p>Collection of <code>objects</code> without duplicates - with no fixed ordering.</p> </li> <li> <p>Sets are mutable.</p> </li> <li> <p>Sets are defined as:</p> </li> </ul> <pre><code>s = {1, 2, 3}\ns = set()           # Empty Set\n\nprint(type(s))      # &lt;class 'set'&gt;\n\ns.add(3)\ns.add(2)\ns.add(2)            # Adding duplicate has no effect\n\nprint(s)            # {2, 3}\n</code></pre> <p>NOTE <code>s = {}</code> defines an empty <code>dictionary</code></p>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Sets_in_Python/#related-pages","title":"Related Pages","text":"<ul> <li>Dictionaries_in_Python</li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Sets_in_Python/#references","title":"References","text":"<ol> <li>Sets-Python_Docs</li> </ol>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Strings_in_Python/","title":"Strings in Python","text":"<p>000_Index_DS_Algo Collections_in_Python</p> <ul> <li> <p>The name of class for strings is <code>str</code> . It's NOT string.</p> </li> <li> <p>To create new strings from other types use</p> </li> </ul> <pre><code>newStr = str(x)\n</code></pre> <ul> <li> <p>strings are immutable.</p> </li> <li> <p>concatenate two strings with <code>+</code> to create a new string.</p> </li> <li> <p>Individual characters can be accessed using <code>[]</code> and zero based index.</p> </li> <li> <p>Negative index starts counting from end.</p> </li> </ul> <pre><code>n = str(9876)\nprint(n[-1])    # 6\n</code></pre>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Strings_in_Python/#related-pages","title":"Related Pages","text":"","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Strings_in_Python/#references","title":"References","text":"<ol> <li>Text - Python Docs</li> </ol>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Tuples_in_Python/","title":"Tuples in Python","text":"<p>000_Index_DS_Algo Collections_in_Python</p> <ul> <li> <p>Ordered sequence of objects like lists but they are immutable.</p> </li> <li> <p>We can access individual elements with bracket syntax but can't modify   them.</p> </li> </ul> <pre><code>t = ()          # Empty Tuple\nt = (1, 2, \"skip a few\", 99, 100)\nprint(type(t))  # &lt;class 'tuple'&gt;\nprint(t[4])     # 100\n</code></pre> <ul> <li>For <code>list</code> and <code>tuple</code> Ordered means that the items have a defined   order (defined when created), and that order will not change.</li> </ul>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Tuples_in_Python/#related-pages","title":"Related Pages","text":"","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/Tuples_in_Python/#references","title":"References","text":"<ol> <li>Tuples-Python Docs</li> </ol>","tags":["ds-algo/lang-basic/py"]},{"location":"personal-notes/Notes/ds_algo_notes/cpp_basic_notes/","title":"CPP Notes for DSA","text":""},{"location":"personal-notes/Notes/ds_algo_notes/cpp_basic_notes/#input-and-output","title":"Input and Output","text":"<ul> <li>Create two files <code>input.txt</code> and <code>output.txt</code>, for input and output.</li> <li>Within <code>main</code> use the following:</li> </ul> <pre><code>int main() {\n    freopen(\"input.txt\", \"r\", stdin);\n    freopen(\"output.txt\", \"w\", stdout);\n\n    // ... Other code here\n}\n</code></pre>"},{"location":"personal-notes/Notes/ds_algo_notes/cpp_basic_notes/#data-types","title":"Data Types","text":""},{"location":"personal-notes/Notes/ds_algo_notes/cpp_basic_notes/#strings-and-getline","title":"Strings and <code>getline</code>","text":"<ul> <li>To use strings use <code>#include&lt;string&gt;</code>.</li> <li>To read a single line from input at a time use</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main() {\n    string str;\n    getline(cin, str);\n\n    // .. Other code here\n}\n</code></pre>"},{"location":"personal-notes/Notes/ds_algo_notes/cpp_basic_notes/#arrays","title":"Arrays","text":"<ul> <li>To define a 2D array use <code>int arr[3][5]</code>.</li> <li>3 - No of rows. 5 - no of columns.</li> <li>It's stored linearly.<ul> <li>First entire column of row 1 is stored.</li> <li>Next entire column of row 2 is stored and so on.</li> </ul> </li> </ul>"},{"location":"personal-notes/Notes/ds_algo_notes/cpp_basic_notes/#related-pages","title":"Related Pages","text":"<p>-</p>"},{"location":"personal-notes/Notes/ds_algo_notes/cpp_basic_notes/#references","title":"References","text":"<p>1.</p>"},{"location":"personal-notes/Templates/Basic%20Template/","title":"{{title}}","text":""},{"location":"personal-notes/Templates/Basic%20Template/#related-pages","title":"Related Pages","text":""},{"location":"personal-notes/Templates/Basic%20Template/#references","title":"References","text":""}]}